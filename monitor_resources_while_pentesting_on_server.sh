#!/bin/bash

# Define the output file
OUTPUT_FILE="resource_usage_log.txt"

# Define the interval in seconds between checks
INTERVAL=5

# Function to get resource usage
get_usage() {
  TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
  CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')
  MEM_INFO=$(free -m | grep Mem)
  TOTAL_RAM=$(echo $MEM_INFO | awk '{print $2}')
  USED_RAM=$(echo $MEM_INFO | awk '{print $3}')
  FREE_RAM=$(echo $MEM_INFO | awk '{print $4}')
  MEM_USAGE=$(echo "scale=2; $USED_RAM/$TOTAL_RAM*100" | bc)

  # Write the results to the output file
  printf "| %-19s | %6.2f %% | %6.2f %% | %8s MB | %8s MB | %8s MB |\n" "$TIMESTAMP" "$CPU_USAGE" "$MEM_USAGE" "$TOTAL_RAM" "$USED_RAM" "$FREE_RAM" >>$OUTPUT_FILE
}

# Check if the output file exists; if not, initialize it with headers
if [ ! -f "$OUTPUT_FILE" ]; then
  printf "| %-19s | %8s | %8s | %10s | %10s | %10s |\n" "Timestamp" "CPU %" "Mem %" "Total RAM" "Used RAM" "Free RAM" >$OUTPUT_FILE
  printf "| %-19s | %8s | %8s | %10s | %10s | %10s |\n" "-------------------" "--------" "--------" "----------" "----------" "----------" >>$OUTPUT_FILE
fi

# Run the monitoring in a loop
while true; do
  get_usage
  sleep $INTERVAL
done
